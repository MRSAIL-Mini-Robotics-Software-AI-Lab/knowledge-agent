/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.util.List;
import javax.swing.table.DefaultTableModel;
import org.apache.jena.query.ARQ;
import org.apache.jena.query.QueryExecution;
import org.apache.jena.query.QueryExecutionFactory;
import org.apache.jena.query.QuerySolution;
import org.apache.jena.query.ResultSet;
import org.apache.jena.rdf.model.Model;
import org.apache.jena.rdf.model.ModelFactory;
import org.apache.jena.rdf.model.RDFNode;
import org.apache.log4j.BasicConfigurator;

/**
 *
 * @author Mohamed
 */
public class main extends javax.swing.JFrame {

    /**
     * Creates new form main
     * 
     */
    private String ontologyFilePath = "D:\\University\\Real-Senior\\Sem2\\Ontologies\\knowledge-based-agent\\food.xml";

    

    Model model = ModelFactory.createDefaultModel();
   
    public main() {
        BasicConfigurator.configure();
        initComponents();
        try {
             model.read(ontologyFilePath);
        } catch (Exception e) {
            e.printStackTrace();
            // Handle the exception appropriately
        }
            }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        executeButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultsTable = new javax.swing.JTable();
        getALL = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        queryTextField = new javax.swing.JTextArea();
        getApplePie = new javax.swing.JButton();
        appleFood = new javax.swing.JButton();
        maxCalorie = new javax.swing.JButton();
        avg = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        executeButton.setText("Execute");
        executeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeButtonActionPerformed(evt);
            }
        });

        resultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(resultsTable);

        getALL.setText("Get All");
        getALL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getALLActionPerformed(evt);
            }
        });

        queryTextField.setColumns(20);
        queryTextField.setLineWrap(true);
        queryTextField.setRows(5);
        queryTextField.setText("Query to Execute");
        jScrollPane2.setViewportView(queryTextField);

        getApplePie.setText("Get Apple Pie");
        getApplePie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getApplePieActionPerformed(evt);
            }
        });

        appleFood.setText("Get Apple Foods");
        appleFood.setActionCommand("");
        appleFood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appleFoodActionPerformed(evt);
            }
        });

        maxCalorie.setText("Get Maximum Calories");
        maxCalorie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxCalorieActionPerformed(evt);
            }
        });

        avg.setText("Get average proteing and colories");
        avg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                avgActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(getALL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(getApplePie)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(appleFood)
                        .addGap(18, 18, 18)
                        .addComponent(maxCalorie)
                        .addGap(18, 18, 18)
                        .addComponent(avg))
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(executeButton)
                .addGap(26, 26, 26))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(getALL)
                    .addComponent(getApplePie)
                    .addComponent(appleFood)
                    .addComponent(maxCalorie)
                    .addComponent(avg))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(executeButton)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void executeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeButtonActionPerformed
                // Retrieve user input from the query text field
    String query = queryTextField.getText();
    System.out.println(query);
    // Execute the SPARQL query and retrieve the results
    QueryExecution qe = QueryExecutionFactory.create(query, model);
    ResultSet results = qe.execSelect();
     System.out.println(results);
    // Get the result variables from the query
    List<String> variables = results.getResultVars();

    // Process the query results and prepare data for the table
    DefaultTableModel tableModel = new DefaultTableModel();
    for (String variable : variables) {
        tableModel.addColumn(variable);
    }

    while (results.hasNext()) {
        QuerySolution solution = results.next();
        Object[] rowData = new Object[variables.size()];
        int columnIndex = 0;
        for (String variable : variables) {
            RDFNode value = solution.get(variable);
            rowData[columnIndex++] = value != null ? value.toString() : "";
        }
        tableModel.addRow(rowData);
    }

    // Set the table model to display the results
    resultsTable.setModel(tableModel);

    // Close the query execution
    qe.close();
    }//GEN-LAST:event_executeButtonActionPerformed

    private void getALLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getALLActionPerformed
        // Get all query:
        String q = "PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \n"
                + "PREFIX foodOnto: <http://www.semanticweb.org/emnug/ontologies/2023/4/foodOnto#>\n" +
                "SELECT ?food ?calories ?protein\n" +
                "WHERE {\n" +
                "?food rdf:type foodOnto:Food.\n" +
                "?food foodOnto:hasCalories ?calories.\n" +
                "?food foodOnto:hasProtein ?protein.\n" +
                "}";
        queryTextField.setText(q);
    }//GEN-LAST:event_getALLActionPerformed

    private void appleFoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appleFoodActionPerformed
        String q = "PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \n"+
                "PREFIX foodOnto: <http://www.semanticweb.org/emnug/ontologies/2023/4/foodOnto#>\n" +
                "SELECT ?ingredient ?calories ?protein\n" +
                "WHERE {\n" +
                "foodOnto:ApplePie foodOnto:hasIngredient ?ingredient.\n" +
                "?ingredient foodOnto:hasCalories ?calories.\n" +
                "?ingredient foodOnto:hasProtein ?protein.\n" +
                "}";
        queryTextField.setText(q);                       
    }//GEN-LAST:event_appleFoodActionPerformed

    private void getApplePieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getApplePieActionPerformed
        String q = "PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \n"
                + "PREFIX foodOnto: <http://www.semanticweb.org/emnug/ontologies/2023/4/foodOnto#>\n" +
                "SELECT ?food\n" +
                "WHERE {\n" +
                "?food rdf:type foodOnto:Food.\n" +
                "?food foodOnto:hasIngredient foodOnto:Apple.\n" +
                "}";
        queryTextField.setText(q);
    }//GEN-LAST:event_getApplePieActionPerformed

    private void maxCalorieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxCalorieActionPerformed
       
String q = "PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \n"
        + "PREFIX foodOnto: <http://www.semanticweb.org/emnug/ontologies/2023/4/foodOnto#>\n" +
        "SELECT (MAX(?calories) AS ?maxCalories)\n" +
        "WHERE {\n" +
        "?food rdf:type foodOnto:Food.\n" +
        "?food foodOnto:hasCalories ?calories.\n" +
        "} ";
        queryTextField.setText(q);
    }//GEN-LAST:event_maxCalorieActionPerformed

    private void avgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_avgActionPerformed
     String q = "PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \n"
        + "PREFIX foodOnto: <http://www.semanticweb.org/emnug/ontologies/2023/4/foodOnto#>\n" +
        "SELECT (AVG(?calories) AS ?avgCalories) (AVG(?protein) AS ?avgProtein)\n" +
        "WHERE {\n" +
        "?food rdf:type foodOnto:Food.\n" +
        "?food foodOnto:hasCalories ?calories.\n" +
        "?food foodOnto:hasProtein ?protein.\n" +
        "}";
        queryTextField.setText(q);
    }//GEN-LAST:event_avgActionPerformed
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton appleFood;
    private javax.swing.JButton avg;
    private javax.swing.JButton executeButton;
    private javax.swing.JButton getALL;
    private javax.swing.JButton getApplePie;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton maxCalorie;
    private javax.swing.JTextArea queryTextField;
    private javax.swing.JTable resultsTable;
    // End of variables declaration//GEN-END:variables


}
